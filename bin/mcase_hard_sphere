#!/usr/bin/env python
import numpy as np
from ase.io import read, write
from mcase.reader import read_input
from mcase.quantum_moves import minimum_image
from sys import argv

settings = read_input(argv[1])
rng = np.random.default_rng()

# setup system
walker = read(settings['xyz'])

# setup simulation
timestep = float(settings['timestep'])
number_samples = int(settings['samples'])
save_interval = int(settings['save_every'])
radius = float(settings['radius'])

# successful read, print out stuff
print('read inputs from ' + argv[1])
print('particles read from ' + settings['xyz'])
print('settings a hard sphere radius of %s' % radius)
print('timestep: %s' % timestep)
print('number of samples to calculate: %d' % number_samples)
print('writing samples to ' + settings['save_xyz'])
print('will write every %d steps' % save_interval)

# start sampling
accepted = 0
r = walker.get_positions()
L = walker.cell.cellpar()[:3]
N = len(walker)

for i in range(number_samples):
    pass_accepted = 0
    for j in range(N):
        r_new = r[j] + rng.normal(size=3, scale=timestep)
        d = minimum_image(r - r_new, L)
        d = np.linalg.norm(d, axis=-1)
        d[j] = np.inf # ignore the zero
        if np.min(d) > radius:
            # accept
            r[j] = minimum_image(r_new, L)
            pass_accepted += 1
    accepted += pass_accepted / N
    if i % save_interval == (save_interval - 1):
        walker.set_positions(r)
        write(settings['save_xyz'], walker, format='extxyz', append=True, 
                write_info=False, write_results=False)

# finished
print('acceptance ratio: %.2f' % (accepted / number_samples))
